{"version":3,"file":"api.js","sourceRoot":"","sources":["../../src/api/api.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as http from 'http';\n\nconst config = require('./config');\n\nconst app = require('connect')();\nconst cors = require('cors');\nconst jsyaml = require('js-yaml');\nconst jwt = require('jsonwebtoken');\nconst swaggerTools = require('swagger-tools');\n\nexport default class Api {\n    static swaggerOptions: {\n        swaggerUiDir: string,\n        controllers: string,\n        useStubs: boolean\n    };\n    static swaggerDoc: any;\n\n    static initSwagger() {\n        // swaggerRouter configuration\n        Api.swaggerOptions = {\n            swaggerUiDir: __dirname + '/swagger-ui',\n            controllers: __dirname + '/controllers',\n            useStubs: (process.env.NODE_ENV === 'development') // Conditionally turn on stubs (mock mode)\n        };\n\n        // The Swagger document (require it, build it programmatically, fetch it from a URL, ...)\n        const spec = fs.readFileSync(__dirname + '/config/swagger.yaml', 'utf8');\n        Api.swaggerDoc = jsyaml.safeLoad(spec);\n    }\n\n    static initHttp() {\n\n        //CORS\n        app.use(cors({\n            \"origin\": \"*\",\n            \"methods\": \"GET,HEAD,PUT,PATCH,POST,DELETE\",\n            \"preflightContinue\": false //critical for proper swagger cors operations\n        }));\n\n        // Initialize the Swagger middleware\n        swaggerTools.initializeMiddleware(Api.swaggerDoc, (middleware: any) => {\n            // Interpret Swagger resources and attach metadata to request - must be first in swagger-tools middleware chain\n            app.use(middleware.swaggerMetadata());\n\n            // Route security\n            const securityOptions = {\n                token: authCheck\n            };\n\n            app.use(middleware.swaggerSecurity(securityOptions));\n\n            // Validate Swagger requests\n            app.use(middleware.swaggerValidator());\n\n            // Route validated requests to appropriate controller\n            app.use(middleware.swaggerRouter(Api.swaggerOptions));\n\n            // Serve the Swagger documents and Swagger UI\n            app.use(middleware.swaggerUi(Api.swaggerOptions));\n\n            // Start the server\n            http.createServer(app).listen(config.port, () => {\n                console.log('Your server is listening on port %d (http://%s:%d)', config.port, config.host, config.port);\n                console.log('Swagger-ui is available on http://%s:%d/docs', config.host, config.port);\n            });\n        });\n\n        const authCheck = (req: any, authOrSecDef: any, scopesOrApiKey: any, callback: any) => {\n            const authToken = req.headers.token || (req.token ? req.token.value : null);\n\n            console.log('Performing security check for TOKEN:', authToken);\n\n            if (authToken) {\n                // verifies secret and checks exp\n                jwt.verify(authToken, config.api_secret, (err: string, decoded: any) => {\n                        if (err) {\n                            console.log('VERIFY ERROR: ' + err);\n                            return callback({\n                                message: 'Invalid token.',\n                                code: 'InvalidToken',\n                                statusCode: 401,\n                                headers: []\n                            });\n                        } else {\n                            // if everything is good, save to request for use in other routes\n                            callback();\n                        }\n                    }\n                )\n                ;\n            } else {\n                callback({\n                    message: 'No token provided.',\n                    code: 'NoTokenProvided',\n                    statusCode: 401,\n                    headers: []\n                });\n            }\n        }\n    }\n}\n"]}