{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as ini from 'ini';\n\nimport {app, BrowserWindow} from 'electron';\nimport Main from './main';\nimport Logger from './logger/logger';\nimport BlockmarketConfig from './config/blockmarketconfig';\nimport SyscoinConfig from './config/syscoinconfig';\n\nconst blockmarketGlobal: any = global;\nconst path = require('path');\nconst Hashes = require('jshashes');\n\nconst argv = process.argv.slice(1);\nconst options = {debug: false};\n\nfor (let i = 0; i < argv.length; i++) {\n    if (argv[i] === '--dev') {\n        options.debug = true;\n    }\n}\n\nconst blockmarketConfigDefaults = BlockmarketConfig;\nconst blockmarketPath: string = path.join(app.getPath('appData'), app.getName());\nconst blockmarketConfigPath: string = path.join(blockmarketPath, 'Blockmarket.json');\nconst syscoinConfigDefaults = SyscoinConfig;\n\n/**\n * initializeBlockmarketConfig\n *\n * Check if 'Blockmarket.json' exists, if it doesn't create it with defaults\n */\nconst initializeBlockmarketConfig = () => {\n    try {\n        if (fs.statSync(blockmarketConfigPath)) {\n            initializeSyscoinConfig();\n        }\n    } catch (err) {\n        try {\n            fs.mkdirSync(blockmarketPath);\n            fs.writeFileSync(blockmarketConfigPath, JSON.stringify(blockmarketConfigDefaults), 'utf-8');\n            initializeSyscoinConfig();\n        } catch (e) {\n            // Do something when we can't write the default Blockmarket.json file\n        }\n    }\n};\n\n/**\n * initializeSyscoinConfig\n *\n * Check if 'syscoin.conf' exists, if it doesn't create it with defaults\n */\nconst initializeSyscoinConfig = () => {\n    const config = require(blockmarketConfigPath);\n    try {\n        if (fs.statSync(config.server.syscoin_config_path)) {\n            initializeApplication();\n        }\n    } catch (err) {\n        try {\n            fs.writeFileSync(config.server.syscoin_config_path, ini.stringify(syscoinConfigDefaults), 'utf-8');\n            initializeApplication();\n        } catch (e) {\n            // Do something when we can't write the default Blockmarket.json file\n        }\n    }\n};\n\nconst initializeApplication = () => {\n    const config = require(blockmarketConfigPath);\n    const syscoin = ini.parse(fs.readFileSync(config.server.syscoin_config_path, 'utf-8'));\n\n    config.client.api_token = new Hashes.SHA1().hex(`${syscoin.rpcuser}${syscoin.rpcpassword}`);\n    blockmarketGlobal.blockmarket = {\n        config: config.client,\n    };\n\n    // Include the API\n    require('./api/index');\n\n    // Enable context menu\n    require('electron-context-menu')();\n\n    Logger.initialize(app, options);\n    Main.main(app, BrowserWindow, options);\n};\n\ninitializeBlockmarketConfig();\n"]}